const MORSE_TABLE = {
    '.-':     'a',
    '-...':   'b',
    '-.-.':   'c',
    '-..':    'd',
    '.':      'e',
    '..-.':   'f',
    '--.':    'g',
    '....':   'h',
    '..':     'i',
    '.---':   'j',
    '-.-':    'k',
    '.-..':   'l',
    '--':     'm',
    '-.':     'n',
    '---':    'o',
    '.--.':   'p',
    '--.-':   'q',
    '.-.':    'r',
    '...':    's',
    '-':      't',
    '..-':    'u',
    '...-':   'v',
    '.--':    'w',
    '-..-':   'x',
    '-.--':   'y',
    '--..':   'z',
    '.----':  '1',
    '..---':  '2',
    '...--':  '3',
    '....-':  '4',
    '.....':  '5',
    '-....':  '6',
    '--...':  '7',
    '---..':  '8',
    '----.':  '9',
    '-----':  '0',
};


function decode(expr) {

  let letter = '',
      code = '',
      pos = 0,
      part = '',
      word = '';
      
  do {                                                     
    part = expr.substring(pos, pos + 10);              // берём кусок из 10 символов (это код одной буквы)
    if (part === '**********') { word = word + ' ' }   // если этот кусок равен звёздочкам, это пробел - пушим пробел в итоговую строку

    else { 
      letter = part.slice(part.indexOf('1'));          // иначе: берём часть строки, начинающууся с '1', всё что раньше - нули, их отбросим 

      for (let i = 0; i < letter.length; i+=2) {       // цикл составления кода из цифр, берём по две цифры, поэтому i+=2 
        let char = letter.substring(i, i+2);
        if (char == 10) { code = code + '.' }          // пушим соответствующие '10' и '11' символы в переменную содержащую код буквы
        if (char == 11) { code = code + '-' } 
      }

      word = word + MORSE_TABLE[code];              // по полученному коду пушим в итоговую переменную символ из таблицы морзе  

      code = '';                                    // обнуляем переменную с кодом, 
    }

    pos += 10;                                      // перемещаемся дальше по input строке дальше на 10 символов

  } while (pos < expr.length );                     // если позиция больше чем длина инпут-строки - выходим из цикла


  return (word);
}


module.exports = {
     decode
}